import os
import logging
from dotenv import load_dotenv
from langchain_ibm import WatsonxLLM
from langchain.prompts import PromptTemplate

# Configure logging
logging.basicConfig(
    # filename='app.log',
    filemode="a",
    level=logging.ERROR,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
class CreateMessagesPipeline:
    """
    Pipeline to create body email based on water data.
    """

    def __init__(self):
        load_dotenv()
        self.watsonx_apikey = os.getenv('WATSONX_APIKEY')
        self.project_id = os.getenv('PROJECT_ID')
        self.url = os.getenv('URL')
        
        self.params_dic = {
            "decoding_method": "greedy",
            "min_new_tokens": 0,
            "max_new_tokens": 300,
            "repetition_penalty": 1,
            "stop_sequences": ["Vasco."]
        }
        
        self.llm = WatsonxLLM(
            model_id='ibm/granite-3-8b-instruct',            
            url=self.url,
            apikey=self.watsonx_apikey,
            project_id=self.project_id,
            params=self.params_dic
        )
        
        self.prompt_text = """Analyze the JSON input containing water quality sensor data from a water tank in Pais Vasco. Write a formal, concise, and professional email body addressed to the city council of the specified city. The email should explain which components are outside their acceptable thresholds, specifying the component name, the current value, the threshold exceeded (upper or lower), and the direction of the anomaly (above or below threshold). Use a numbered list to display only the affected components. Do not include greetings, subject lines, or closings. End the message with the following line:

        "This email was generated by the AI agent of the Minsaiters team after analyzing water quality sensor data from Pais Vasco."


        Input: {{
        "city": "VITORIA",
        "water_tank_name": "Deposito de Bidebieta",
        "component": [
            {{
            "name": "CONDUCTIVIDAD (20ºC)",
            "current_value": 116.30,
            "lower_threshold": 120.48,
            "upper_threshold": 129.75
            }},
            {{
            "name": "PH (20ºC)",
            "current_value": 7.90,
            "lower_threshold": 7.42,
            "upper_threshold": 7.64
            }},
            {{
            "name": "TEMPERATURA",
            "current_value": 16.10,
            "lower_threshold": 11.15,
            "upper_threshold": 14.40
            }},
            {{
            "name": "TURBIDEZ",
            "current_value": 0.319,
            "lower_threshold": 0.040,
            "upper_threshold": 0.150
            }}
        ]
        }}

        Output:
        Dear Vitoria City Council,

        An analysis of the sensor data from the water tank Bidebieta in Vitoria has identified that some parameters have exceeded their acceptable thresholds. The affected components are:

        1. CONDUCTIVITY  (20ºC): The current value is 116.30, which is below the lower threshold of 120.48.
        2. PH (20ºC): The current value is 7.90, which is above the upper threshold of 7.64.
        3. TEMPERATURE: The current value is 16.10, which is above the upper threshold of 14.40.
        4. TURBIDIY: The current value is 0.319, which is above the upper threshold of 0.150.

        These anomalies may be due to a potential sensor malfunction. We recommend performing a technical inspection to verify the condition of the equipment and ensure accurate data monitoring.

        Best regards,

        This email was generated by the AI agent of the Minsaiters team after analyzing water quality sensor data from País Vasco.


        Input: {water_data}
        Output:
        """



    def filter_water_data(self, total_water_data):
        water_data = {
            "city": total_water_data["city"],
            "water_tank_name": total_water_data["water_tank_name"],
            "component": [
                {
                    "name": c["name"],
                    "current_value": c["current_value"],
                    "lower_threshold": c["lower_threshold"],
                    "upper_threshold": c["upper_threshold"]
                }
                for c in total_water_data["component"]
                if c["component_alert"] == "KO"
            ]
        }
        return water_data
    
    def call_llm(self, water_data):
        prompt_template = PromptTemplate(
            input_variables=["water_data"],
            template=self.prompt_text,
        )
        
        llm_chain = prompt_template | self.llm
        output = llm_chain.invoke({"water_data": water_data})
        return output
    
    def create_messages(self, total_water_data):
        try:
            water_data = self.filter_water_data(total_water_data)
            body_email = self.call_llm(water_data)
            return body_email
        except Exception as e:
            logging.error(f"Error creating email: {str(e)}")
            return {"error": "Failed to create email"}
        
if __name__ == "__main__":
    # Crear instancia de la clase
    pipeline = CreateMessagesPipeline()

    # Datos de prueba
    test_data = {
    "city": "DONOSTIA-SAN SEBASTIAN",
    "water_tank_name": "Deposito de Putzueta",
    "alert": "KO",
    "component": [
        {
            "name": "CLORO LIBRE RESIDUAL",
            "current_value": 0.706,
            "lower_threshold": 0.598,
            "upper_threshold": 0.727,
            "median": 0.669,
            "component_alert": "OK"
        },
        {
            "name": "CONDUCTIVIDAD (20ºC)",
            "current_value": 118.411,
            "lower_threshold": 120.488,
            "upper_threshold": 129.752,
            "median": 124.981,
            "component_alert": "KO"
        },
        {
            "name": "PH (20ºC)",
            "current_value": 7.700,
            "lower_threshold": 7.426,
            "upper_threshold": 7.642,
            "median": 7.548,
            "component_alert": "KO"
        },
        {
            "name": "TEMPERATURA",
            "current_value": 16.201,
            "lower_threshold": 11.151,
            "upper_threshold": 14.408,
            "median": 12.619,
            "component_alert": "KO"
        },
        {
            "name": "TURBIDEZ",
            "current_value": 0.019,
            "lower_threshold": 0.040,
            "upper_threshold": 0.150,
            "median": 0.084,
            "component_alert": "KO"
        }
    ]
    }
    # Ejecutar el método y mostrar el resultado
    result = pipeline.create_messages(test_data)
    print("Resultado del Email:\n", result)







